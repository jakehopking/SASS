// FORMS
// ===============================================================================

// Normalize non-controls
//
// Restyle and baseline non-control form elements.


// Vars 

$form-border-radius:            $brand-round;
$form-padding:                  $base-line-height;
$form-padding-horizontal:       $form-padding / 2;
$form-padding-vertical:         $form-padding / 4;
$form-margin:                   $base-line-height;
$form-transition:               $transition;     

$form-small-padding:            $base-line-height / 1.25;
$form-small-padding-horizontal: $form-small-padding / 2;
$form-small-padding-vertical:   $form-small-padding / 4;
$form-small-font:               $base-font-size / 1.25;
$form-small-border-radius:      $form-border-radius / 1.25;

$form-large-padding:            $base-line-height * 1.25;
$form-large-padding-horizontal: $form-large-padding / 2;
$form-large-padding-vertical:   $form-large-padding / 4;
$form-large-font:               $base-font-size * 1.25;
$form-large-border-radius:      $form-border-radius * 1.25;

%form-focus {
    outline: none;
}

%form-focus-input {
    @extend %form-focus;
    box-shadow: 0 0 4px 0px rgba($colour-link, 0.6);
    border-color: rgba($colour-link, 0.6);
}

%form-hover-input {
    @extend %form-focus;
    box-shadow: 0 0 4px 0px rgba($colour-grey, 0.1);
    border-color: rgba($colour-grey, 0.5);
}



fieldset {
    padding: 0;
    margin: 0;
    border: 0;
    // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
    // so we reset that to ensure it behaves more like a standard block element.
    min-width: 0;
}

legend {
    display: block;
    width: 100%;
    padding: 0;
    margin-bottom: $form-margin;
    font-size: ($base-font-size * 1.5);
    line-height: inherit;
    // color: $legend-color;
    border: 0;
    @include font();
    // border-bottom: 1px solid $legend-border-color;
}

label {
    display: inline-block;
    max-width: 100%; // Force IE8 to wrap long content
    margin-bottom: 5px;
    font-weight: bold;
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {

}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
    margin: 4px 0 0;
    margin-top: 1px \9; // IE8-9
    line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
    display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
    display: block;
    width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
    height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
    @extend %form-focus;
}

// Adjust output element
// output {
//     display: block;
//     padding-top: ($form-padding-vertical + 1);
//     font-size: $base-font-size;
//     line-height: $base-line-height;
//     color: $input-color;
// }


// Common form controls
//
// Shared size and type resets for form controls. Apply .form-group__item to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-group__item {
    display: block;
    width: 100%;
    // height: $base-line-height; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    padding: $form-padding-vertical $form-padding-horizontal;
    font-size: $base-font-size;
    line-height: $base-line-height;
    color: $form-input-colour;
    background-color: $form-input-bg;
    background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
    border: 1px solid $form-input-border;
    border-radius: $form-border-radius;
    box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
    @include vendor(transition, $transition);
    &:hover {
        @extend %form-hover-input;
    }
    &:focus, &:focus:hover {
        @extend %form-focus-input;
    }
    &[disabled],
    &[readonly],
    fieldset[disabled] & {
        @extend %cursor-disabled;
        color: $form-disabled;
        background-color: $form-disabled-bg;
        opacity: 1; // iOS fix for unreadable disabled content
}

// [converter] extracted textarea& to textarea.form-group__item
}

// Reset height for `textarea`s
textarea.form-group__item {
    height: auto;
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-group__item` class can properly style them. Note that this cannot simply
// be added to `.form-group__item` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
    -webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari.

@media screen and (-webkit-min-device-pixel-ratio: 0) {
    input[type="date"],
    input[type="time"],
    input[type="datetime-local"],
    input[type="month"] {
        line-height: $base-line-height;
    }
    // input[type="date"].input-sm,
    // input[type="time"].input-sm,
    // input[type="datetime-local"].input-sm,
    // input[type="month"].input-sm {
    //     line-height: $input-height-small;
    // }
    // input[type="date"].input-lg,
    // input[type="time"].input-lg,
    // input[type="datetime-local"].input-lg,
    // input[type="month"].input-lg {
    //     line-height: $input-height-large;
    // }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
    margin-bottom: $form-margin;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
    position: relative;
    display: block;
    margin-top: 10px;
    margin-bottom: 10px;
    label {
        min-height: $line-height-ratio; // Ensure the input doesn't jump when there is no text
        padding-left: 20px;
        margin-bottom: 0;
        font-weight: normal;
        cursor: pointer;
    }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
    position: absolute;
    margin-left: -20px;
    margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
    margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
    display: inline-block;
    padding-left: 20px;
    margin-bottom: 0;
    vertical-align: middle;
    font-weight: normal;
    cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
    margin-top: 0;
    margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
    &[disabled],
    &.disabled,
    fieldset[disabled] & {
        @extend %cursor-disabled;
    }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
    &.disabled,
    fieldset[disabled] & {
        @extend %cursor-disabled;
    }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
    &.disabled,
    fieldset[disabled] & {
        label {
            @extend %cursor-disabled;
        }
    }
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-group__item--static {
    // Size it appropriately next to real form controls
    padding-top: ($form-padding-vertical + 1);
    padding-bottom: ($form-padding-vertical + 1);
    // Remove default margin from `p`
    margin-bottom: 0;

    &.input-lg,
    &.input-sm {
        padding-left: 0;
        padding-right: 0;
    }
}


// Form control sizing
//
// Build on `.form-group__item` with modifier classes to decrease or increase the
// height and font-size of form controls.


@mixin input-size($parent, $input-height, $padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
    #{$parent} {
        height: $input-height;
        padding: $padding-vertical $padding-horizontal;
        font-size: $font-size;
        line-height: $line-height;
        border-radius: $border-radius;
    }

    select#{$parent} {
        height: $input-height;
        line-height: $input-height;
    }

    textarea#{$parent},
    select[multiple]#{$parent} {
        height: auto;
    }
}


@include input-size('.input--sm, .form-group--sm .form-group__item', $form-small-padding, $form-small-padding-vertical, $form-small-padding-horizontal, $form-small-font, $form-small-padding, $form-small-border-radius);

@include input-size('.input--lg, .form-group--lg .form-group__item', $form-large-padding, $form-large-padding-vertical, $form-large-padding-horizontal, $form-large-font, $form-large-padding, $form-large-border-radius);

// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
    // Enable absolute positioning
    position: relative;

    // Ensure icons don't overlap text
    .form-group__item {
        padding-right: ($form-padding * 1.25);
    }
}
// Feedback icon (requires .font-awesome classes)
.form-group__item--feedback {
    position: absolute;
    top: 0;
    right: 0;
    z-index: 2; // Ensure icon is above input groups
    display: block;
    width: $form-padding;
    height: $form-padding;
    line-height: $form-padding;
    text-align: center;
    pointer-events: none;
}
.input-lg + .form-group__item--feedback {
    width: $form-large-padding;
    height: $form-large-padding;
    line-height: $form-large-padding;
}
.input-sm + .form-group__item--feedback {
    width: $form-small-padding;
    height: $form-small-padding;
    line-height: $form-small-padding;
}

// Feedback states
.has-success {
    // @include form-group__item--validation($state-success-text, $state-success-text, $state-success-bg);
}
.has-warning {
    // @include form-group__item--validation($state-warning-text, $state-warning-text, $state-warning-bg);
}
.has-error {
    // @include form-group__item--validation($state-danger-text, $state-danger-text, $state-danger-bg);
}

// Reposition feedback icon if input has visible label above
.has-feedback label {
    & ~ .form-group__item--feedback {
        top: ($line-height-ratio + 5); // Height of the `label` and its margin
    }
    &.sr-only ~ .form-group__item--feedback {
        top: 0;
    }
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
    display: block; // account for any element using help-block
    margin-top: 5px;
    margin-bottom: 10px;
    // color: lighten($text-color, 25%); // lighten the text some for contrast
}


// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

// [converter] extracted from `.form-inline` for libsass compatibility
@mixin form-inline {
    // Kick in the inline
    @media (min-width: $breakpoint-lap) {
        // Inline-block all the things for "inline"
        .form-group {
            display: inline-block;
            margin-bottom: 0;
            vertical-align: middle;
        }

        // In navbar-form, allow folks to *not* use `.form-group`
        .form-group__item {
            display: inline-block;
            width: auto; // Prevent labels from stacking above inputs in `.form-group`
            vertical-align: middle;
        }

        // Make static controls behave like regular ones
        .form-group__item--static {
            display: inline-block;
        }

        .input-group {
            display: inline-table;
            vertical-align: middle;

            .input-group-addon,
            .input-group-btn,
            .form-group__item {
                width: auto;
            }
        }

        // Input groups need that 100% width though
        .input-group > .form-group__item {
            width: 100%;
        }

        .control-label {
            margin-bottom: 0;
            vertical-align: middle;
        }

        // Remove default margin on radios/checkboxes that were used for stacking, and
        // then undo the floating of radios and checkboxes to match (which also avoids
        // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
        .radio,
        .checkbox {
            display: inline-block;
            margin-top: 0;
            margin-bottom: 0;
            vertical-align: middle;

            label {
                padding-left: 0;
            }
        }
        .radio input[type="radio"],
        .checkbox input[type="checkbox"] {
            position: relative;
            margin-left: 0;
        }

        // Re-override the feedback icon.
        .has-feedback .form-group__item--feedback {
            top: 0;
        }
    }
}
// [converter] extracted as `@mixin form-inline` for libsass compatibility
.form-inline {
    @include form-inline;
}



// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

    // Consistent vertical alignment of radios and checkboxes
    //
    // Labels also get some reset styles, but that is scoped to a media query below.
    .radio,
    .checkbox,
    .radio-inline,
    .checkbox-inline {
        margin-top: 0;
        margin-bottom: 0;
        padding-top: ($form-padding-vertical + 1); // Default padding plus a border
    }
    // Account for padding we're adding to ensure the alignment and of help text
    // and other content below items
    .radio,
    .checkbox {
        min-height: ($line-height-ratio + ($form-padding-vertical + 1));
    }

    // Make form groups behave like rows
    .form-group {
        @extend .cf;
    }

    // Reset spacing and right align labels, but scope to media queries so that
    // labels on narrow viewports stack the same as a default form example.
    @media (min-width: $breakpoint-lap) {
        .control-label {
            text-align: right;
            margin-bottom: 0;
            padding-top: ($form-padding-vertical + 1); // Default padding plus a border
        }
    }

    // Validation states
    //
    // Reposition the icon because it's now within a grid column and columns have
    // `position: relative;` on them. Also accounts for the grid gutter padding.
    .has-feedback .form-group__item--feedback {
        right: ($gutter / 2);
    }

    // Form group sizes
    //
    // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
    // inputs and labels within a `.form-group`.
    .form-group-lg {
        @media (min-width: $breakpoint-lap) {
            .control-label {
                // padding-top: (($form-large-padding-vertical * $form-large-padding) + 1);
            }
        }
    }
    .form-group-sm {
        @media (min-width: $breakpoint-lap) {
            .control-label {
                padding-top: ($form-small-padding-vertical + 1);
            }
        }
    }
}


.extra-help{
    margin-top: $form-margin / 2;
    display: inline-block;
    visibility: hidden;
}
.form-group__item:active + .extra-help,
.form-group__item:focus + .extra-help {
    visibility: visible;
    @include vendor(transition, $transition);
}
